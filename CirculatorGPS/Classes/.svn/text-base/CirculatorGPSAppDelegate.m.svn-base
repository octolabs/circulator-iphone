//
//  CirculatorGPSAppDelegate.m
//  CirculatorGPS
//
//  Created by Marc Irlandez on 5/19/09.
//  Copyright __MyCompanyName__ 2009. All rights reserved.
//


#import "CirculatorGPSAppDelegate.h"
#import "RoutesViewController.h"
#import "StopsViewController.h"
#import "TimetableViewController.h"
#import <UIKit/UIKit.h>
#import <JSON/JSON.h>
#import <Foundation/NSAutoreleasePool.h>

@implementation CirculatorGPSAppDelegate

@synthesize window;
@synthesize tabBarController;

@synthesize mapScrollView, mapImage;

@synthesize findNavController;

@synthesize currentColor, currentRoute, currentStop;

@synthesize colorViewController, routesViewController, stopsViewController, timetableViewController;

@synthesize colors, routes, stops, buses, timetables;

@synthesize currentLocation;
@synthesize currentRoutes, currentStops, currentBuses, currentTimetables;

@synthesize activityIndicator;

- (NSString *) stringWithUrl:(NSURL *)url
{
	NSURLRequest *urlRequest = [NSURLRequest requestWithURL:
								url cachePolicy:
								NSURLRequestReturnCacheDataElseLoad
											timeoutInterval:30];
	// Fetch the JSON response
	NSData *urlData;
	NSURLResponse *response;
	NSError *error;
	
	// Make synchronous request
	urlData = [NSURLConnection sendSynchronousRequest:urlRequest
									returningResponse:&response
												error:&error];
	
 	// Construct a String around the Data from the response
	return [[NSString alloc] initWithData:urlData encoding:NSUTF8StringEncoding];
}


- (id) objectWithUrl:(NSURL *)url
{
	SBJSON *jsonParser = [SBJSON new];
	NSString *jsonString = [self stringWithUrl:url];
	
	// Parse the JSON into an Object
	return [jsonParser objectWithString:jsonString error:NULL];
}


- (void)applicationDidFinishLaunching:(UIApplication *)application {    

    // Override point for customization after application launch
	[self setColors:[[NSMutableArray alloc] initWithContentsOfFile:[[NSBundle mainBundle] pathForResource:@"colors" ofType:@"plist"]]];
	[self setRoutes:[[NSMutableArray alloc] initWithContentsOfFile:[[NSBundle mainBundle] pathForResource:@"routes" ofType:@"plist"]]];
	//NSLog(@"routes: %@", [self routes]);
	[self setStops:[NSArray arrayWithContentsOfFile:[[NSBundle mainBundle] pathForResource:@"stops" ofType:@"plist"]]];
	//NSLog(@"stops: %@", [self stops]);
	[self setTimetables:[NSArray arrayWithContentsOfFile:[[NSBundle mainBundle] pathForResource:@"timetables" ofType:@"plist"]]];
	//NSLog(@"timetables: %@", [self timetables]);
	[self setBuses:[NSArray arrayWithContentsOfFile:[[NSBundle mainBundle] pathForResource:@"buses" ofType:@"plist"]]];
	//NSLog(@"buses: %@", [self buses]);

	UIImageView *tempImageView = [[UIImageView alloc] initWithImage:[UIImage imageWithContentsOfFile:[[NSBundle mainBundle] pathForResource:@"map" ofType:@"png"]]];
	[self setMapImage:tempImageView];
	[tempImageView release];
	
	mapScrollView.contentSize = CGSizeMake(mapImage.frame.size.width, mapImage.frame.size.height);
	mapScrollView.maximumZoomScale = 3.0;
	mapScrollView.minimumZoomScale = 0.5;
	[mapScrollView setContentOffset:CGPointMake(mapImage.frame.size.width/2, mapImage.frame.size.height/2)];
	mapScrollView.clipsToBounds = YES;
	mapScrollView.delegate = self;
    [mapScrollView addSubview:mapImage];
    
	[colorViewController setTitle:@"Pick A Route"];
	findNavController.viewControllers = [NSArray arrayWithObjects:colorViewController, nil];
	
	[window addSubview:[tabBarController view]];
	
	activityIndicator = [[UIActivityIndicatorView alloc] initWithActivityIndicatorStyle:UIActivityIndicatorViewStyleWhiteLarge];
	activityIndicator.center = window.center;
	activityIndicator.autoresizingMask = UIViewAutoresizingFlexibleLeftMargin | UIViewAutoresizingFlexibleTopMargin | UIViewAutoresizingFlexibleRightMargin | UIViewAutoresizingFlexibleBottomMargin;
	
	[window addSubview:activityIndicator];
	
	[window makeKeyAndVisible];
}


- (UIView *)viewForZoomingInScrollView:(UIScrollView *)scrollView {
	return mapImage;
}


- (void)dealloc {
	[findNavController release];
	[routesViewController release];
	[stopsViewController release];
	[timetableViewController release];
	[mapScrollView release];
	[mapImage release];
    [tabBarController release];
	[activityIndicator release];
	[window release];
    [super dealloc];
}


- (void) colorClicked:(NSString *)routeName {
	NSLog(@"colorClicked START: %@", routeName);
	currentColor = [self getColor:routeName];
	NSLog(@"colorClicked:currentColor: %@", [self currentColor]);
	currentRoutes = [self getRoutes:currentColor];
	[routesViewController setTitle:@"Pick A Direction"];
	[[routesViewController tableView] reloadData];
	[findNavController pushViewController:routesViewController animated:YES];
	NSLog(@"colorClicked END: %@", routeName);
}


- (void) routeClicked:(NSString *)routeName {
	NSLog(@"routeClicked START: %@", routeName);
	currentRoute = [self getRoute:routeName];
	NSLog(@"routeClicked:currentRoute: %@", [self currentRoute]);
	currentStops = [self getStops:currentRoute];
	
	currentStop = [self getClosestStop:currentRoute];
	NSLog(@"closestStop: %@", currentStop);
	
	[stopsViewController setTitle:@"Pick A Stop"];
	[[stopsViewController tableView] reloadData];
	[findNavController pushViewController:stopsViewController animated:YES];
	NSLog(@"routeClicked END: %@", routeName);
}

- (void) stopClicked:(NSString *)stopName {
	NSLog(@"stopClicked START: %@", stopName);
	currentStop = [self getStop:stopName];
	[activityIndicator startAnimating];
	[NSThread detachNewThreadSelector:@selector(hitWebService:) toTarget:self withObject:nil];
	NSLog(@"stopClicked END: %@", stopName);
}


- (void)hitWebService:(id)someObject {
	NSAutoreleasePool *p = [[NSAutoreleasePool alloc] init];
	[timetableViewController setTitle:@"Closest Buses"];
	currentBuses = [self getClosestBuses:currentStop];
	currentTimetables = [self getTimetables:[currentStop valueForKey:@"route_id"]];
	[[timetableViewController tableView] reloadData];
	[findNavController pushViewController:timetableViewController animated:YES];
	[p release];
	[NSThread exit];
}


- (NSDictionary *) getColor:(NSString *)routeName {
	NSLog(@"getColor START: %@", routeName);
	NSEnumerator *e = [colors objectEnumerator];
	NSDictionary *color;
	while ( (color = [e nextObject]) ) {
		if ([routeName isEqualToString:[color valueForKey:@"name"]]) {
			NSLog(@"getColor END: %@", routeName);
			return (NSDictionary *) color;
		}
	}
	NSLog(@"getColor END: %@", routeName);
	return nil;
}


- (NSMutableArray *) getRoutes:(NSDictionary *)color {
	NSLog(@"getRoutes START");
	NSMutableArray *directions = [[NSMutableArray alloc] initWithCapacity:0];
	NSEnumerator *e = [routes objectEnumerator];
	NSDictionary *route;
	while ( (route = [e nextObject]) ) {
		if ([[route valueForKey:@"color"] isEqualToString:[color valueForKey:@"color"]]) {
			if ([@"yellow" isEqualToString:[color valueForKey:@"color"]]) {
				NSDate *today = [NSDate date];
				NSCalendar *gregorian = [[NSCalendar alloc]
										 initWithCalendarIdentifier:NSGregorianCalendar];
				NSDateComponents *todayComponents = [gregorian components:(NSHourCalendarUnit) fromDate:today];
				NSInteger hour = [todayComponents hour];
				if (hour < 21 && hour > 2) {
					if ([[route valueForKey:@"route_id"] isEqualToString:@"6"] || [[route valueForKey:@"route_id"] isEqualToString:@"7"]) {
						[directions addObject:route];
					}
				} else {
					if ([[route valueForKey:@"route_id"] isEqualToString:@"10"] || [[route valueForKey:@"route_id"] isEqualToString:@"11"]) {
						[directions addObject:route];
					}
				}
			} else {
				[directions addObject:route];
			}
		}
	}
	NSLog(@"getRoutes END");
	return directions;
}


- (NSDictionary *) getRoute:(NSString *)routeName {
	NSLog(@"getRoute START: %@", routeName);
	NSEnumerator *e = [routes objectEnumerator];
	NSDictionary *route;
	while ( (route = [e nextObject]) ) {
		if ([routeName isEqualToString:[route valueForKey:@"name"]]) {
			return (NSDictionary *) route;
		}
	}
	NSLog(@"getRoute END: %@", routeName);
	return nil;
}


- (NSMutableArray *) getStops:(NSDictionary *)route {
	NSLog(@"getStops START");
	NSMutableArray *routeStops = [[NSMutableArray alloc] initWithCapacity:0];
	NSEnumerator *e = [stops objectEnumerator];
	NSDictionary *stop;
	while ( (stop = [e nextObject]) ) {
		if ([[route valueForKey:@"route_id"] isEqualToString:[stop valueForKey:@"route_id"]]) {
			[routeStops addObject:stop];
		}
	}
	NSLog(@"getStops END");
	return routeStops;
}


- (NSDictionary *) getStop:(NSString *)stopName {
	NSLog(@"getStop: %@", stopName);
	NSEnumerator *e = [stops objectEnumerator];
	NSDictionary *stop;
	while ( (stop = [e nextObject]) ) {
		if ([stopName isEqualToString:[stop valueForKey:@"name"]]) {
			return (NSDictionary *) stop;
		}
	}
	NSLog(@"getStop END: %@", stopName);
	return nil;
}


- (NSDictionary *)getClosestStop:(NSDictionary *)route {
	NSLog(@"getClosestStop:currentLocation: %@", currentLocation);
	NSMutableArray *routeStops = [self getStops:route];
	//NSLog(@"getClosestStop:routeStops: %@", routeStops);
	NSEnumerator *e = [routeStops objectEnumerator];
	NSDictionary *stop;
	NSDictionary *closestStop = nil;
	double closestDistance = 999999999;
	while ( (stop = [e nextObject]) ) {
		//NSLog(@"looping through routeStops: %@", stop);
		CLLocation *location = [[CLLocation alloc] initWithLatitude:[[stop objectForKey:@"lat"] floatValue] longitude:[[stop objectForKey:@"lon"] floatValue]];
		double currentDistance = [currentLocation getDistanceFrom:location];
		if (currentDistance < closestDistance) {
			//NSLog(@"getClosestStop:found a closer stop!: %@", stop);
			closestStop = stop;
			closestDistance = currentDistance;
		}
	}
	NSLog(@"getClosestStop:closestStop: %@", closestStop);
	return closestStop;
}


- (NSArray *) getClosestBuses:(NSDictionary *)stop {
	NSLog(@"getClosestBuses START");
		
	//double milesConversion = 0.000621371192;
	NSMutableArray *closestBuses = [[NSMutableArray alloc] initWithCapacity:10];
	// Get buses from webservice than iterate over it, remove the timetables variable
	NSString *url = [NSString stringWithFormat:@"http://dc-circ.appspot.com/api/nextBus.json?route_id=%@&stop_id=%@", [stop valueForKey:@"route_id"], [stop valueForKey:@"stop_id"]];
	id response = [self objectWithUrl:[NSURL URLWithString:url]];
	NSEnumerator *e = [response objectEnumerator];
	
	/*
	 NSDictionary *closestBus;
	 while ( (closestBus = [e nextObject]) ) {
	 CLLocation *location = [[CLLocation alloc] initWithLatitude:[[stop objectForKey:@"lat"] floatValue] longitude:[[stop objectForKey:@"lon"] floatValue]];
	 double currentDistance = [currentLocation getDistanceFrom:location] * milesConversion;
	 [closestBuses addObject:[NSString stringWithFormat:@"Bus %@ is %0.2f miles away", [closestBus valueForKey:@"number"], currentDistance]];
	 }
	*/
	
	NSString *busInfo;
	while ( (busInfo = [e nextObject]) ) {
		[closestBuses addObject:busInfo];
	}
		
	NSLog(@"getClosestBuses END");
	return closestBuses;
}


- (NSArray *) getTimetables:(NSString *)routeId {
	NSLog(@"getTimetables START: %@", routeId);
	NSMutableArray *stopTimetables = [[NSMutableArray alloc] initWithCapacity:10];
	NSEnumerator *e = [timetables objectEnumerator];
	NSDictionary *timetable;
	while ( (timetable = [e nextObject]) ) {
		if ([routeId isEqualToString:[timetable valueForKey:@"route_id"]]) {
			[stopTimetables addObject:[NSString stringWithFormat:@"%@ %@-%@", [timetable valueForKey:@"day"], [timetable valueForKey:@"begin"], [timetable valueForKey:@"end"]]];
		}
	}
	NSLog(@"getTimetables END");
	return stopTimetables;
}


@end
